name: Release

on:
  push:
    tags:
    - 'v*'

jobs:
  license-check:
    runs-on: ubuntu-latest
    name: check-license
    steps:
    - uses: actions/checkout@v3
    - name: Check license
      run: |
        git submodule update --init tools/autd3-license-check
        cd tools/license-checker
        cargo run

  release:
    needs: [license-check]
    name: create-github-release
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
        echo "${{ steps.create_release.outputs.id }}" > release_id.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_id
        path: release_id.txt

  publish_win:
    needs: [release]
    name: upload-release-asset-windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup
        uses: ./.github/actions/setup-build
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          os: windows-latest
          shaderc: true
          cuda: true

      - name: Get the version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-win';

      - name: Build project x64
        run: |
          python3 build.py build --release
          Compress-Archive -Path LICENSE, bin, lib, ThirdPartyNotice.txt -DestinationPath assets_x64.zip
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        uses: juliangruber/read-file-action@v1
        with:
          path: ./release_url/release_url.txt
      - name: Upload Release Asset Win x64
        id: upload-release-asset-win64
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ steps.get_release_info.outputs.content }}
          asset_path: ./assets_x64.zip
          asset_name: ${{ steps.get_version.outputs.result }}-x64.zip
          asset_content_type: application/zip

  publish_win-unity:
    needs: [release]
    name: upload-release-asset-windows-for-unity
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup
        uses: ./.github/actions/setup-build
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          os: windows-latest
          shaderc: true
          cuda: true

      - name: Get the version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-win-unity';

      - name: Build project x64
        run: |
          python3 build.py build --release --features "use_meter single_float"
          Compress-Archive -Path LICENSE, bin, lib, ThirdPartyNotice.txt -DestinationPath assets_x64.zip
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        uses: juliangruber/read-file-action@v1
        with:
          path: ./release_url/release_url.txt
      - name: Upload Release Asset Win x64
        id: upload-release-asset-win64
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ steps.get_release_info.outputs.content }}
          asset_path: ./assets_x64.zip
          asset_name: ${{ steps.get_version.outputs.result }}-x64.zip
          asset_content_type: application/zip

  publish_linux:
    needs: [release]
    name: upload-release-asset-linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup-build
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          os: ubuntu-latest
          shaderc: true
          cuda: true

      - name: Get the version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-linux';

      - name: Build project x64
        run: |
          python3 build.py build --release
          tar -zcvf assets_x64.tar.gz bin lib LICENSE ThirdPartyNotice.txt
        shell: bash
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo "upload_url=$value" >> $GITHUB_OUTPUT
      - name: Upload Release Asset
        id: upload-release-asset-x64
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets_x64.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}-x64.tar.gz
          asset_content_type: application/octet-stream

  publish_linux_unity:
    needs: [release]
    name: upload-release-asset-linux-unity
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup-build
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          os: ubuntu-latest
          shaderc: true
          cuda: true

      - name: Get the version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-linux-unity';

      - name: Build project x64
        run: |
          python3 build.py build --release --features "use_meter single_float"
          tar -zcvf assets_x64.tar.gz bin lib LICENSE ThirdPartyNotice.txt
        shell: bash
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo "upload_url=$value" >> $GITHUB_OUTPUT
      - name: Upload Release Asset
        id: upload-release-asset-x64
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets_x64.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}-x64.tar.gz
          asset_content_type: application/octet-stream

  
  publish_linux-arm32:
    needs: [release]
    name: upload-release-asset-linux-arm32
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup-build
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          os: ubuntu-latest
          arch: 'arm32'
          shaderc: false
          cuda: false

      - name: Get the version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-linux';

      - name: Build project arm32
        run: |
          python3 build.py build --release --arch arm32
          tar -zcvf assets_arm32.tar.gz bin lib LICENSE ThirdPartyNotice.txt
        shell: bash
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo "upload_url=$value" >> $GITHUB_OUTPUT
      - name: Upload Release Asset
        id: upload-release-asset-arm32
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets_arm32.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}-armv7.tar.gz
          asset_content_type: application/octet-stream

  publish_linux-aarch64:
    needs: [release]
    name: upload-release-asset-linux-aarch64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup-build
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          os: ubuntu-latest
          arch: 'aarch64'
          shaderc: false
          cuda: false

      - name: Get the version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-linux';

      - name: Build project aarch64
        run: |
          python3 build.py build --release --arch aarch64
          tar -zcvf assets_aarch64.tar.gz bin lib LICENSE ThirdPartyNotice.txt
        shell: bash
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo "upload_url=$value" >> $GITHUB_OUTPUT
      - name: Upload Release Asset
        id: upload-release-asset-aarch64
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets_aarch64.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}-aarch64.tar.gz
          asset_content_type: application/octet-stream

  publish_mac:
    needs: [release]
    name: upload-release-asset-macos
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup-build
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          os: macos-latest
          shaderc: true
          cuda: false

      - name: Get the version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-macos-universal.tar.gz';

      - name: Build project
        run: |
          python3 build.py build --release --universal
          tar -zcvf assets.tar.gz bin lib LICENSE ThirdPartyNotice.txt
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo "upload_url=$value" >> $GITHUB_OUTPUT
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}
          asset_content_type: application/octet-stream

  publish_mac_unity:
    needs: [release]
    name: upload-release-asset-macos-unity
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup
        uses: ./.github/actions/setup-build
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          os: macos-latest
          shaderc: true
          cuda: false

      - name: Get the version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-macos-unity-universal.tar.gz';

      - name: Build project
        run: |
          python3 build.py build --release --universal --features "use_meter single_float"
          tar -zcvf assets.tar.gz bin lib LICENSE ThirdPartyNotice.txt
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo "upload_url=$value" >> $GITHUB_OUTPUT
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}
          asset_content_type: application/octet-stream

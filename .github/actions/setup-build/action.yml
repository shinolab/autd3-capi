name: 'build tools setup action'
inputs:
  os:
    description: 'os'
    required: true
    default: ''
  arch:
    description: 'arch'
    required: false
    default: ''
  shaderc:
    description: 'shaderc'
    required: false
    default: ''
  cuda:
    description: 'cuda'
    required: false
    default: ''
runs:
  using: "composite"
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      if: inputs.os == 'windows-latest'
      with:
        python-version: "3.12"

    - uses: Jimver/cuda-toolkit@v0.2.15
      if: inputs.cuda == 'true' && inputs.os == 'windows-latest'
      with:
        method: 'network'
        sub-packages: '["nvcc", "cudart", "cublas_dev", "cusolver_dev"]'
    - name: install cuda
      shell: bash
      if: inputs.cuda == 'true' && inputs.os == 'ubuntu-latest'
      run: |
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
        sudo dpkg -i cuda-keyring_1.1-1_all.deb
        sudo apt-get update
        sudo apt-get -y install cuda-nvcc-12-4 libcublas-dev-12-4 libcusolver-dev-12-4
        echo "/usr/local/cuda/bin" >> $GITHUB_PATH

    - name: install shaderc
      shell: pwsh
      if: inputs.shaderc == 'true' && inputs.os == 'windows-latest'
      run: |
        Invoke-WebRequest -URI https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/windows/continuous_release_2019/44/20240430-112613/install.zip -OutFile shaderc.zip
        Expand-Archive -Path shaderc.zip -DestinationPath shaderc
        echo "SHADERC_LIB_DIR=$Env:GITHUB_WORKSPACE/shaderc/install/lib" >> $Env:GITHUB_ENV
        rm shaderc.zip
    - name: install shaderc
      shell: bash
      if: inputs.shaderc == 'true' && inputs.os == 'ubuntu-latest'
      run: |
        sudo apt-get install build-essential cmake git ninja-build
    - name: install shaderc
      shell: bash
      if: inputs.shaderc == 'true' && inputs.os == 'macos-latest'
      run: |
        brew install ninja
      
    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: 'stable'

    - name: install cross
      shell: bash
      if: inputs.os == 'ubuntu-latest' && (inputs.arch == 'armv7' || inputs.arch == 'aarch64') 
      run: |
        curl -L https://github.com/cross-rs/cross/releases/download/v0.2.5/cross-x86_64-unknown-linux-gnu.tar.gz > cross.tar.gz
        tar -xzf cross.tar.gz
        cp cross /usr/local/bin
        cp cross-util /usr/local/bin
        rm cross.tar.gz

    - name: install aarch64-pc-windows-msvc target
      shell: bash
      if: inputs.os == 'windows-latest' && inputs.arch == 'aarch64'
      run: |
        rustup target install aarch64-pc-windows-msvc

    - name: setup cache
      uses: swatinem/rust-cache@v2
